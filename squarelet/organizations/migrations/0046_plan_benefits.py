# Generated by Django 4.2.18 on 2025-08-28 15:17

# Django
from django.db import migrations, models

SUNLIGHT_DESCRIPTION = """**Multiply your newsroom's investigative impact.**

Our research experts help newsrooms dig deeper to produce stories with impact.

Sunlight Research Center's exclusive membership options give your team the resources they need.

Whether you're backgrounding a source, tracking campaign money, or connecting the dots in public records â€” we're the support system behind the byline.

**Custom Memberships**

In addition to Basic, Premium, and Enterprise plans, Sunlight Research can tailor a plan to your organization's specific needs. A custom membership includes:

- All the benefits of Enterprise
- Customized newsroom training
- Long-term projects

Please email [hello@sunlightresearch.net](mailto:hello@sunlightresearch.net) to learn more about developing a custom plan for your newsroom.

**Membership Information**

You may change the level of your membership at any time by giving us 30 days notice. If you move to a membership with a lower fee, we will refund the difference or credit your account within 30 days. If you move to a membership with a higher fee, we will collect the difference for the rest of the term on a pro-rata basis.

You may also cancel your membership at any time by giving us 30 days notice. If you cancel your membership, we will refund your annual fee on a pro rata basis, minus a 15% cancellation fee to help defray the costs associated with your cancellation.

We do not offer partial refunds of monthly fees.

[**Review the full terms of service here.**](https://www.sunlightresearch.net/terms-of-service)"""

PLAN_BENEFITS = {
    "sunlight-basic": [
        "Two small projects or one medium project",
        "One investigative consult",
        "Monthly workshops and investigative office hours",
        "Access to online tools",
        "Access to Slack community",
        "Free MuckRock account with discounted rates for bulk public record requests",
        "Recommended for newsrooms with 5 or fewer staff and short-term projects",
    ],
    "sunlight-basic-annual": [
        "Two small projects or one medium project",
        "One investigative consult",
        "Monthly workshops and investigative office hours",
        "Access to online tools",
        "Access to Slack community",
        "Free MuckRock account with discounted rates for bulk public record requests",
        "Recommended for newsrooms with 5 or fewer staff and short-term projects",
    ],
    "sunlight-premium": [
        "Four small projects or two medium projects",
        "Two investigative consults",
        "Monthly workshops and investigative office hours",
        "Access to online tools",
        "Access to Slack community",
        "Free MuckRock account with discounted rates for bulk public record requests",
    ],
    "sunlight-premium-annual": [
        "Four small projects or two medium projects",
        "Two investigative consults",
        "Monthly workshops and investigative office hours",
        "Access to online tools",
        "Access to Slack community",
        "Free MuckRock account with discounted rates for bulk public record requests",
    ],
    "sunlight-enterprise": [
        "One large project or a mix of small & medium projects",
        "Four investigative consults",
        "Monthly training and investigative office hours",
        "Access to online tools",
        "Access to Slack community",
        "Free MuckRock account with discounted rates for bulk public record requests",
    ],
    "sunlight-enterprise-annual": [
        "One large project or a mix of small & medium projects",
        "Four investigative consults",
        "Monthly training and investigative office hours",
        "Access to online tools",
        "Access to Slack community",
        "Free MuckRock account with discounted rates for bulk public record requests",
    ],
}


def populate_plan_benefits(apps, schema_editor):
    Plan = apps.get_model("organizations", "Plan")
    for slug, benefits in PLAN_BENEFITS.items():
        try:
            plan = Plan.objects.get(slug=slug)
            plan.benefits = benefits
            plan.description = SUNLIGHT_DESCRIPTION
            plan.save()
        except Plan.DoesNotExist:
            pass  # Skip if plan doesn't exist


class Migration(migrations.Migration):

    dependencies = [
        ("organizations", "0047_auto_20250829_1413"),
    ]

    operations = [
        migrations.AddField(
            model_name="plan",
            name="benefits",
            field=models.JSONField(
                blank=True,
                default=list,
                help_text="List of benefits included with this plan",
                verbose_name="benefits",
            ),
        ),
        migrations.AddField(
            model_name="plan",
            name="description",
            field=models.TextField(
                blank=True,
                help_text="Detailed description of the plan, in Markdown",
                verbose_name="description",
            ),
        ),
        migrations.RunPython(populate_plan_benefits, migrations.RunPython.noop),
    ]
